// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smartivrphonegateway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_smartivrphonegateway_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_smartivrphonegateway_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_smartivrphonegateway_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_smartivrphonegateway_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_smartivrphonegateway_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_smartivrphonegateway_2eproto_metadata_getter(int index);
namespace smartivrphonegateway {
class Config;
struct ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class SmartIVRRequest;
struct SmartIVRRequestDefaultTypeInternal;
extern SmartIVRRequestDefaultTypeInternal _SmartIVRRequest_default_instance_;
class SmartIVRResponse;
struct SmartIVRResponseDefaultTypeInternal;
extern SmartIVRResponseDefaultTypeInternal _SmartIVRResponse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace smartivrphonegateway
PROTOBUF_NAMESPACE_OPEN
template<> ::smartivrphonegateway::Config* Arena::CreateMaybeMessage<::smartivrphonegateway::Config>(Arena*);
template<> ::smartivrphonegateway::SmartIVRRequest* Arena::CreateMaybeMessage<::smartivrphonegateway::SmartIVRRequest>(Arena*);
template<> ::smartivrphonegateway::SmartIVRResponse* Arena::CreateMaybeMessage<::smartivrphonegateway::SmartIVRResponse>(Arena*);
template<> ::smartivrphonegateway::Status* Arena::CreateMaybeMessage<::smartivrphonegateway::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smartivrphonegateway {

enum SmartIVRResponseType : int {
  RECOGNIZE = 0,
  RESULT_ASR = 1,
  RESULT_TTS = 2,
  CALL_WAIT = 3,
  CALL_FORWARD = 4,
  CALL_END = 5,
  SmartIVRResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SmartIVRResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SmartIVRResponseType_IsValid(int value);
constexpr SmartIVRResponseType SmartIVRResponseType_MIN = RECOGNIZE;
constexpr SmartIVRResponseType SmartIVRResponseType_MAX = CALL_END;
constexpr int SmartIVRResponseType_ARRAYSIZE = SmartIVRResponseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmartIVRResponseType_descriptor();
template<typename T>
inline const std::string& SmartIVRResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SmartIVRResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SmartIVRResponseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SmartIVRResponseType_descriptor(), enum_t_value);
}
inline bool SmartIVRResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SmartIVRResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SmartIVRResponseType>(
    SmartIVRResponseType_descriptor(), name, value);
}
// ===================================================================

class SmartIVRRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smartivrphonegateway.SmartIVRRequest) */ {
 public:
  inline SmartIVRRequest() : SmartIVRRequest(nullptr) {}
  virtual ~SmartIVRRequest();
  explicit constexpr SmartIVRRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmartIVRRequest(const SmartIVRRequest& from);
  SmartIVRRequest(SmartIVRRequest&& from) noexcept
    : SmartIVRRequest() {
    *this = ::std::move(from);
  }

  inline SmartIVRRequest& operator=(const SmartIVRRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartIVRRequest& operator=(SmartIVRRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartIVRRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmartIVRRequest* internal_default_instance() {
    return reinterpret_cast<const SmartIVRRequest*>(
               &_SmartIVRRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SmartIVRRequest& a, SmartIVRRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartIVRRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartIVRRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartIVRRequest* New() const final {
    return CreateMaybeMessage<SmartIVRRequest>(nullptr);
  }

  SmartIVRRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartIVRRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartIVRRequest& from);
  void MergeFrom(const SmartIVRRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartIVRRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smartivrphonegateway.SmartIVRRequest";
  }
  protected:
  explicit SmartIVRRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_smartivrphonegateway_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyPressFieldNumber = 2,
    kAudioContentFieldNumber = 4,
    kConfigFieldNumber = 3,
    kIsPlayingFieldNumber = 1,
  };
  // string key_press = 2;
  void clear_key_press();
  const std::string& key_press() const;
  void set_key_press(const std::string& value);
  void set_key_press(std::string&& value);
  void set_key_press(const char* value);
  void set_key_press(const char* value, size_t size);
  std::string* mutable_key_press();
  std::string* release_key_press();
  void set_allocated_key_press(std::string* key_press);
  private:
  const std::string& _internal_key_press() const;
  void _internal_set_key_press(const std::string& value);
  std::string* _internal_mutable_key_press();
  public:

  // bytes audio_content = 4;
  void clear_audio_content();
  const std::string& audio_content() const;
  void set_audio_content(const std::string& value);
  void set_audio_content(std::string&& value);
  void set_audio_content(const char* value);
  void set_audio_content(const void* value, size_t size);
  std::string* mutable_audio_content();
  std::string* release_audio_content();
  void set_allocated_audio_content(std::string* audio_content);
  private:
  const std::string& _internal_audio_content() const;
  void _internal_set_audio_content(const std::string& value);
  std::string* _internal_mutable_audio_content();
  public:

  // .smartivrphonegateway.Config config = 3;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::smartivrphonegateway::Config& config() const;
  ::smartivrphonegateway::Config* release_config();
  ::smartivrphonegateway::Config* mutable_config();
  void set_allocated_config(::smartivrphonegateway::Config* config);
  private:
  const ::smartivrphonegateway::Config& _internal_config() const;
  ::smartivrphonegateway::Config* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::smartivrphonegateway::Config* config);
  ::smartivrphonegateway::Config* unsafe_arena_release_config();

  // bool is_playing = 1;
  void clear_is_playing();
  bool is_playing() const;
  void set_is_playing(bool value);
  private:
  bool _internal_is_playing() const;
  void _internal_set_is_playing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:smartivrphonegateway.SmartIVRRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_press_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_content_;
  ::smartivrphonegateway::Config* config_;
  bool is_playing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartivrphonegateway_2eproto;
};
// -------------------------------------------------------------------

class SmartIVRResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smartivrphonegateway.SmartIVRResponse) */ {
 public:
  inline SmartIVRResponse() : SmartIVRResponse(nullptr) {}
  virtual ~SmartIVRResponse();
  explicit constexpr SmartIVRResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmartIVRResponse(const SmartIVRResponse& from);
  SmartIVRResponse(SmartIVRResponse&& from) noexcept
    : SmartIVRResponse() {
    *this = ::std::move(from);
  }

  inline SmartIVRResponse& operator=(const SmartIVRResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartIVRResponse& operator=(SmartIVRResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartIVRResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmartIVRResponse* internal_default_instance() {
    return reinterpret_cast<const SmartIVRResponse*>(
               &_SmartIVRResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SmartIVRResponse& a, SmartIVRResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartIVRResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartIVRResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartIVRResponse* New() const final {
    return CreateMaybeMessage<SmartIVRResponse>(nullptr);
  }

  SmartIVRResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartIVRResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartIVRResponse& from);
  void MergeFrom(const SmartIVRResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartIVRResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smartivrphonegateway.SmartIVRResponse";
  }
  protected:
  explicit SmartIVRResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_smartivrphonegateway_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextAsrFieldNumber = 2,
    kTextBotFieldNumber = 3,
    kForwardSipJsonFieldNumber = 4,
    kAudioContentFieldNumber = 6,
    kStatusFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // string text_asr = 2;
  void clear_text_asr();
  const std::string& text_asr() const;
  void set_text_asr(const std::string& value);
  void set_text_asr(std::string&& value);
  void set_text_asr(const char* value);
  void set_text_asr(const char* value, size_t size);
  std::string* mutable_text_asr();
  std::string* release_text_asr();
  void set_allocated_text_asr(std::string* text_asr);
  private:
  const std::string& _internal_text_asr() const;
  void _internal_set_text_asr(const std::string& value);
  std::string* _internal_mutable_text_asr();
  public:

  // string text_bot = 3;
  void clear_text_bot();
  const std::string& text_bot() const;
  void set_text_bot(const std::string& value);
  void set_text_bot(std::string&& value);
  void set_text_bot(const char* value);
  void set_text_bot(const char* value, size_t size);
  std::string* mutable_text_bot();
  std::string* release_text_bot();
  void set_allocated_text_bot(std::string* text_bot);
  private:
  const std::string& _internal_text_bot() const;
  void _internal_set_text_bot(const std::string& value);
  std::string* _internal_mutable_text_bot();
  public:

  // string forward_sip_json = 4;
  void clear_forward_sip_json();
  const std::string& forward_sip_json() const;
  void set_forward_sip_json(const std::string& value);
  void set_forward_sip_json(std::string&& value);
  void set_forward_sip_json(const char* value);
  void set_forward_sip_json(const char* value, size_t size);
  std::string* mutable_forward_sip_json();
  std::string* release_forward_sip_json();
  void set_allocated_forward_sip_json(std::string* forward_sip_json);
  private:
  const std::string& _internal_forward_sip_json() const;
  void _internal_set_forward_sip_json(const std::string& value);
  std::string* _internal_mutable_forward_sip_json();
  public:

  // bytes audio_content = 6;
  void clear_audio_content();
  const std::string& audio_content() const;
  void set_audio_content(const std::string& value);
  void set_audio_content(std::string&& value);
  void set_audio_content(const char* value);
  void set_audio_content(const void* value, size_t size);
  std::string* mutable_audio_content();
  std::string* release_audio_content();
  void set_allocated_audio_content(std::string* audio_content);
  private:
  const std::string& _internal_audio_content() const;
  void _internal_set_audio_content(const std::string& value);
  std::string* _internal_mutable_audio_content();
  public:

  // .smartivrphonegateway.Status status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::smartivrphonegateway::Status& status() const;
  ::smartivrphonegateway::Status* release_status();
  ::smartivrphonegateway::Status* mutable_status();
  void set_allocated_status(::smartivrphonegateway::Status* status);
  private:
  const ::smartivrphonegateway::Status& _internal_status() const;
  ::smartivrphonegateway::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::smartivrphonegateway::Status* status);
  ::smartivrphonegateway::Status* unsafe_arena_release_status();

  // .smartivrphonegateway.SmartIVRResponseType type = 1;
  void clear_type();
  ::smartivrphonegateway::SmartIVRResponseType type() const;
  void set_type(::smartivrphonegateway::SmartIVRResponseType value);
  private:
  ::smartivrphonegateway::SmartIVRResponseType _internal_type() const;
  void _internal_set_type(::smartivrphonegateway::SmartIVRResponseType value);
  public:

  // @@protoc_insertion_point(class_scope:smartivrphonegateway.SmartIVRResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_asr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_bot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr forward_sip_json_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_content_;
  ::smartivrphonegateway::Status* status_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartivrphonegateway_2eproto;
};
// -------------------------------------------------------------------

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smartivrphonegateway.Config) */ {
 public:
  inline Config() : Config(nullptr) {}
  virtual ~Config();
  explicit constexpr Config(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance() {
    return *internal_default_instance();
  }
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smartivrphonegateway.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_smartivrphonegateway_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationIdFieldNumber = 1,
  };
  // string conversation_id = 1;
  void clear_conversation_id();
  const std::string& conversation_id() const;
  void set_conversation_id(const std::string& value);
  void set_conversation_id(std::string&& value);
  void set_conversation_id(const char* value);
  void set_conversation_id(const char* value, size_t size);
  std::string* mutable_conversation_id();
  std::string* release_conversation_id();
  void set_allocated_conversation_id(std::string* conversation_id);
  private:
  const std::string& _internal_conversation_id() const;
  void _internal_set_conversation_id(const std::string& value);
  std::string* _internal_mutable_conversation_id();
  public:

  // @@protoc_insertion_point(class_scope:smartivrphonegateway.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartivrphonegateway_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smartivrphonegateway.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  virtual ~Status();
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smartivrphonegateway.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_smartivrphonegateway_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:smartivrphonegateway.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_smartivrphonegateway_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SmartIVRRequest

// bool is_playing = 1;
inline void SmartIVRRequest::clear_is_playing() {
  is_playing_ = false;
}
inline bool SmartIVRRequest::_internal_is_playing() const {
  return is_playing_;
}
inline bool SmartIVRRequest::is_playing() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRRequest.is_playing)
  return _internal_is_playing();
}
inline void SmartIVRRequest::_internal_set_is_playing(bool value) {
  
  is_playing_ = value;
}
inline void SmartIVRRequest::set_is_playing(bool value) {
  _internal_set_is_playing(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.SmartIVRRequest.is_playing)
}

// string key_press = 2;
inline void SmartIVRRequest::clear_key_press() {
  key_press_.ClearToEmpty();
}
inline const std::string& SmartIVRRequest::key_press() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRRequest.key_press)
  return _internal_key_press();
}
inline void SmartIVRRequest::set_key_press(const std::string& value) {
  _internal_set_key_press(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.SmartIVRRequest.key_press)
}
inline std::string* SmartIVRRequest::mutable_key_press() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.SmartIVRRequest.key_press)
  return _internal_mutable_key_press();
}
inline const std::string& SmartIVRRequest::_internal_key_press() const {
  return key_press_.Get();
}
inline void SmartIVRRequest::_internal_set_key_press(const std::string& value) {
  
  key_press_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartIVRRequest::set_key_press(std::string&& value) {
  
  key_press_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smartivrphonegateway.SmartIVRRequest.key_press)
}
inline void SmartIVRRequest::set_key_press(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_press_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smartivrphonegateway.SmartIVRRequest.key_press)
}
inline void SmartIVRRequest::set_key_press(const char* value,
    size_t size) {
  
  key_press_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smartivrphonegateway.SmartIVRRequest.key_press)
}
inline std::string* SmartIVRRequest::_internal_mutable_key_press() {
  
  return key_press_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartIVRRequest::release_key_press() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.SmartIVRRequest.key_press)
  return key_press_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartIVRRequest::set_allocated_key_press(std::string* key_press) {
  if (key_press != nullptr) {
    
  } else {
    
  }
  key_press_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_press,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.SmartIVRRequest.key_press)
}

// .smartivrphonegateway.Config config = 3;
inline bool SmartIVRRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool SmartIVRRequest::has_config() const {
  return _internal_has_config();
}
inline void SmartIVRRequest::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::smartivrphonegateway::Config& SmartIVRRequest::_internal_config() const {
  const ::smartivrphonegateway::Config* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::smartivrphonegateway::Config&>(
      ::smartivrphonegateway::_Config_default_instance_);
}
inline const ::smartivrphonegateway::Config& SmartIVRRequest::config() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRRequest.config)
  return _internal_config();
}
inline void SmartIVRRequest::unsafe_arena_set_allocated_config(
    ::smartivrphonegateway::Config* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smartivrphonegateway.SmartIVRRequest.config)
}
inline ::smartivrphonegateway::Config* SmartIVRRequest::release_config() {
  
  ::smartivrphonegateway::Config* temp = config_;
  config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smartivrphonegateway::Config* SmartIVRRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.SmartIVRRequest.config)
  
  ::smartivrphonegateway::Config* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::smartivrphonegateway::Config* SmartIVRRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::smartivrphonegateway::Config>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::smartivrphonegateway::Config* SmartIVRRequest::mutable_config() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.SmartIVRRequest.config)
  return _internal_mutable_config();
}
inline void SmartIVRRequest::set_allocated_config(::smartivrphonegateway::Config* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.SmartIVRRequest.config)
}

// bytes audio_content = 4;
inline void SmartIVRRequest::clear_audio_content() {
  audio_content_.ClearToEmpty();
}
inline const std::string& SmartIVRRequest::audio_content() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRRequest.audio_content)
  return _internal_audio_content();
}
inline void SmartIVRRequest::set_audio_content(const std::string& value) {
  _internal_set_audio_content(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.SmartIVRRequest.audio_content)
}
inline std::string* SmartIVRRequest::mutable_audio_content() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.SmartIVRRequest.audio_content)
  return _internal_mutable_audio_content();
}
inline const std::string& SmartIVRRequest::_internal_audio_content() const {
  return audio_content_.Get();
}
inline void SmartIVRRequest::_internal_set_audio_content(const std::string& value) {
  
  audio_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartIVRRequest::set_audio_content(std::string&& value) {
  
  audio_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smartivrphonegateway.SmartIVRRequest.audio_content)
}
inline void SmartIVRRequest::set_audio_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smartivrphonegateway.SmartIVRRequest.audio_content)
}
inline void SmartIVRRequest::set_audio_content(const void* value,
    size_t size) {
  
  audio_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smartivrphonegateway.SmartIVRRequest.audio_content)
}
inline std::string* SmartIVRRequest::_internal_mutable_audio_content() {
  
  return audio_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartIVRRequest::release_audio_content() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.SmartIVRRequest.audio_content)
  return audio_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartIVRRequest::set_allocated_audio_content(std::string* audio_content) {
  if (audio_content != nullptr) {
    
  } else {
    
  }
  audio_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.SmartIVRRequest.audio_content)
}

// -------------------------------------------------------------------

// SmartIVRResponse

// .smartivrphonegateway.SmartIVRResponseType type = 1;
inline void SmartIVRResponse::clear_type() {
  type_ = 0;
}
inline ::smartivrphonegateway::SmartIVRResponseType SmartIVRResponse::_internal_type() const {
  return static_cast< ::smartivrphonegateway::SmartIVRResponseType >(type_);
}
inline ::smartivrphonegateway::SmartIVRResponseType SmartIVRResponse::type() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRResponse.type)
  return _internal_type();
}
inline void SmartIVRResponse::_internal_set_type(::smartivrphonegateway::SmartIVRResponseType value) {
  
  type_ = value;
}
inline void SmartIVRResponse::set_type(::smartivrphonegateway::SmartIVRResponseType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.SmartIVRResponse.type)
}

// string text_asr = 2;
inline void SmartIVRResponse::clear_text_asr() {
  text_asr_.ClearToEmpty();
}
inline const std::string& SmartIVRResponse::text_asr() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRResponse.text_asr)
  return _internal_text_asr();
}
inline void SmartIVRResponse::set_text_asr(const std::string& value) {
  _internal_set_text_asr(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.SmartIVRResponse.text_asr)
}
inline std::string* SmartIVRResponse::mutable_text_asr() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.SmartIVRResponse.text_asr)
  return _internal_mutable_text_asr();
}
inline const std::string& SmartIVRResponse::_internal_text_asr() const {
  return text_asr_.Get();
}
inline void SmartIVRResponse::_internal_set_text_asr(const std::string& value) {
  
  text_asr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartIVRResponse::set_text_asr(std::string&& value) {
  
  text_asr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smartivrphonegateway.SmartIVRResponse.text_asr)
}
inline void SmartIVRResponse::set_text_asr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_asr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smartivrphonegateway.SmartIVRResponse.text_asr)
}
inline void SmartIVRResponse::set_text_asr(const char* value,
    size_t size) {
  
  text_asr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smartivrphonegateway.SmartIVRResponse.text_asr)
}
inline std::string* SmartIVRResponse::_internal_mutable_text_asr() {
  
  return text_asr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartIVRResponse::release_text_asr() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.SmartIVRResponse.text_asr)
  return text_asr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartIVRResponse::set_allocated_text_asr(std::string* text_asr) {
  if (text_asr != nullptr) {
    
  } else {
    
  }
  text_asr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_asr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.SmartIVRResponse.text_asr)
}

// string text_bot = 3;
inline void SmartIVRResponse::clear_text_bot() {
  text_bot_.ClearToEmpty();
}
inline const std::string& SmartIVRResponse::text_bot() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRResponse.text_bot)
  return _internal_text_bot();
}
inline void SmartIVRResponse::set_text_bot(const std::string& value) {
  _internal_set_text_bot(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.SmartIVRResponse.text_bot)
}
inline std::string* SmartIVRResponse::mutable_text_bot() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.SmartIVRResponse.text_bot)
  return _internal_mutable_text_bot();
}
inline const std::string& SmartIVRResponse::_internal_text_bot() const {
  return text_bot_.Get();
}
inline void SmartIVRResponse::_internal_set_text_bot(const std::string& value) {
  
  text_bot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartIVRResponse::set_text_bot(std::string&& value) {
  
  text_bot_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smartivrphonegateway.SmartIVRResponse.text_bot)
}
inline void SmartIVRResponse::set_text_bot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_bot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smartivrphonegateway.SmartIVRResponse.text_bot)
}
inline void SmartIVRResponse::set_text_bot(const char* value,
    size_t size) {
  
  text_bot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smartivrphonegateway.SmartIVRResponse.text_bot)
}
inline std::string* SmartIVRResponse::_internal_mutable_text_bot() {
  
  return text_bot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartIVRResponse::release_text_bot() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.SmartIVRResponse.text_bot)
  return text_bot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartIVRResponse::set_allocated_text_bot(std::string* text_bot) {
  if (text_bot != nullptr) {
    
  } else {
    
  }
  text_bot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_bot,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.SmartIVRResponse.text_bot)
}

// string forward_sip_json = 4;
inline void SmartIVRResponse::clear_forward_sip_json() {
  forward_sip_json_.ClearToEmpty();
}
inline const std::string& SmartIVRResponse::forward_sip_json() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRResponse.forward_sip_json)
  return _internal_forward_sip_json();
}
inline void SmartIVRResponse::set_forward_sip_json(const std::string& value) {
  _internal_set_forward_sip_json(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.SmartIVRResponse.forward_sip_json)
}
inline std::string* SmartIVRResponse::mutable_forward_sip_json() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.SmartIVRResponse.forward_sip_json)
  return _internal_mutable_forward_sip_json();
}
inline const std::string& SmartIVRResponse::_internal_forward_sip_json() const {
  return forward_sip_json_.Get();
}
inline void SmartIVRResponse::_internal_set_forward_sip_json(const std::string& value) {
  
  forward_sip_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartIVRResponse::set_forward_sip_json(std::string&& value) {
  
  forward_sip_json_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smartivrphonegateway.SmartIVRResponse.forward_sip_json)
}
inline void SmartIVRResponse::set_forward_sip_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  forward_sip_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smartivrphonegateway.SmartIVRResponse.forward_sip_json)
}
inline void SmartIVRResponse::set_forward_sip_json(const char* value,
    size_t size) {
  
  forward_sip_json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smartivrphonegateway.SmartIVRResponse.forward_sip_json)
}
inline std::string* SmartIVRResponse::_internal_mutable_forward_sip_json() {
  
  return forward_sip_json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartIVRResponse::release_forward_sip_json() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.SmartIVRResponse.forward_sip_json)
  return forward_sip_json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartIVRResponse::set_allocated_forward_sip_json(std::string* forward_sip_json) {
  if (forward_sip_json != nullptr) {
    
  } else {
    
  }
  forward_sip_json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), forward_sip_json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.SmartIVRResponse.forward_sip_json)
}

// .smartivrphonegateway.Status status = 5;
inline bool SmartIVRResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SmartIVRResponse::has_status() const {
  return _internal_has_status();
}
inline void SmartIVRResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::smartivrphonegateway::Status& SmartIVRResponse::_internal_status() const {
  const ::smartivrphonegateway::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::smartivrphonegateway::Status&>(
      ::smartivrphonegateway::_Status_default_instance_);
}
inline const ::smartivrphonegateway::Status& SmartIVRResponse::status() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRResponse.status)
  return _internal_status();
}
inline void SmartIVRResponse::unsafe_arena_set_allocated_status(
    ::smartivrphonegateway::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smartivrphonegateway.SmartIVRResponse.status)
}
inline ::smartivrphonegateway::Status* SmartIVRResponse::release_status() {
  
  ::smartivrphonegateway::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::smartivrphonegateway::Status* SmartIVRResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.SmartIVRResponse.status)
  
  ::smartivrphonegateway::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::smartivrphonegateway::Status* SmartIVRResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::smartivrphonegateway::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::smartivrphonegateway::Status* SmartIVRResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.SmartIVRResponse.status)
  return _internal_mutable_status();
}
inline void SmartIVRResponse::set_allocated_status(::smartivrphonegateway::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.SmartIVRResponse.status)
}

// bytes audio_content = 6;
inline void SmartIVRResponse::clear_audio_content() {
  audio_content_.ClearToEmpty();
}
inline const std::string& SmartIVRResponse::audio_content() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.SmartIVRResponse.audio_content)
  return _internal_audio_content();
}
inline void SmartIVRResponse::set_audio_content(const std::string& value) {
  _internal_set_audio_content(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.SmartIVRResponse.audio_content)
}
inline std::string* SmartIVRResponse::mutable_audio_content() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.SmartIVRResponse.audio_content)
  return _internal_mutable_audio_content();
}
inline const std::string& SmartIVRResponse::_internal_audio_content() const {
  return audio_content_.Get();
}
inline void SmartIVRResponse::_internal_set_audio_content(const std::string& value) {
  
  audio_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SmartIVRResponse::set_audio_content(std::string&& value) {
  
  audio_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smartivrphonegateway.SmartIVRResponse.audio_content)
}
inline void SmartIVRResponse::set_audio_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smartivrphonegateway.SmartIVRResponse.audio_content)
}
inline void SmartIVRResponse::set_audio_content(const void* value,
    size_t size) {
  
  audio_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smartivrphonegateway.SmartIVRResponse.audio_content)
}
inline std::string* SmartIVRResponse::_internal_mutable_audio_content() {
  
  return audio_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SmartIVRResponse::release_audio_content() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.SmartIVRResponse.audio_content)
  return audio_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SmartIVRResponse::set_allocated_audio_content(std::string* audio_content) {
  if (audio_content != nullptr) {
    
  } else {
    
  }
  audio_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.SmartIVRResponse.audio_content)
}

// -------------------------------------------------------------------

// Config

// string conversation_id = 1;
inline void Config::clear_conversation_id() {
  conversation_id_.ClearToEmpty();
}
inline const std::string& Config::conversation_id() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.Config.conversation_id)
  return _internal_conversation_id();
}
inline void Config::set_conversation_id(const std::string& value) {
  _internal_set_conversation_id(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.Config.conversation_id)
}
inline std::string* Config::mutable_conversation_id() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.Config.conversation_id)
  return _internal_mutable_conversation_id();
}
inline const std::string& Config::_internal_conversation_id() const {
  return conversation_id_.Get();
}
inline void Config::_internal_set_conversation_id(const std::string& value) {
  
  conversation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Config::set_conversation_id(std::string&& value) {
  
  conversation_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smartivrphonegateway.Config.conversation_id)
}
inline void Config::set_conversation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  conversation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smartivrphonegateway.Config.conversation_id)
}
inline void Config::set_conversation_id(const char* value,
    size_t size) {
  
  conversation_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smartivrphonegateway.Config.conversation_id)
}
inline std::string* Config::_internal_mutable_conversation_id() {
  
  return conversation_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Config::release_conversation_id() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.Config.conversation_id)
  return conversation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Config::set_allocated_conversation_id(std::string* conversation_id) {
  if (conversation_id != nullptr) {
    
  } else {
    
  }
  conversation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.Config.conversation_id)
}

// -------------------------------------------------------------------

// Status

// int32 code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.Status.code)
  return _internal_code();
}
inline void Status::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void Status::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.Status.code)
}

// string message = 2;
inline void Status::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Status::message() const {
  // @@protoc_insertion_point(field_get:smartivrphonegateway.Status.message)
  return _internal_message();
}
inline void Status::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:smartivrphonegateway.Status.message)
}
inline std::string* Status::mutable_message() {
  // @@protoc_insertion_point(field_mutable:smartivrphonegateway.Status.message)
  return _internal_mutable_message();
}
inline const std::string& Status::_internal_message() const {
  return message_.Get();
}
inline void Status::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Status::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smartivrphonegateway.Status.message)
}
inline void Status::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:smartivrphonegateway.Status.message)
}
inline void Status::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smartivrphonegateway.Status.message)
}
inline std::string* Status::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Status::release_message() {
  // @@protoc_insertion_point(field_release:smartivrphonegateway.Status.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Status::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smartivrphonegateway.Status.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace smartivrphonegateway

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::smartivrphonegateway::SmartIVRResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smartivrphonegateway::SmartIVRResponseType>() {
  return ::smartivrphonegateway::SmartIVRResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_smartivrphonegateway_2eproto
