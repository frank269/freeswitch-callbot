// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smartivrphonegateway.proto

#include "smartivrphonegateway.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace smartivrphonegateway {
PROTOBUF_CONSTEXPR SmartIVRRequest::SmartIVRRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_press_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.audio_content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_.is_playing_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmartIVRRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartIVRRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartIVRRequestDefaultTypeInternal() {}
  union {
    SmartIVRRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartIVRRequestDefaultTypeInternal _SmartIVRRequest_default_instance_;
PROTOBUF_CONSTEXPR SmartIVRResponse::SmartIVRResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_asr_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.text_bot_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.forward_sip_json_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.audio_content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SmartIVRResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartIVRResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartIVRResponseDefaultTypeInternal() {}
  union {
    SmartIVRResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartIVRResponseDefaultTypeInternal _SmartIVRResponse_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.conversation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
PROTOBUF_CONSTEXPR Status::Status(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusDefaultTypeInternal() {}
  union {
    Status _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace smartivrphonegateway
static ::_pb::Metadata file_level_metadata_smartivrphonegateway_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_smartivrphonegateway_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_smartivrphonegateway_2eproto = nullptr;
const ::uint32_t TableStruct_smartivrphonegateway_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRRequest, _impl_.is_playing_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRRequest, _impl_.key_press_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRRequest, _impl_.config_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRRequest, _impl_.audio_content_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRResponse, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRResponse, _impl_.text_asr_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRResponse, _impl_.text_bot_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRResponse, _impl_.forward_sip_json_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::SmartIVRResponse, _impl_.audio_content_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::Config, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::Config, _impl_.conversation_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::Status, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::Status, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::smartivrphonegateway::Status, _impl_.message_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::smartivrphonegateway::SmartIVRRequest)},
        { 12, -1, -1, sizeof(::smartivrphonegateway::SmartIVRResponse)},
        { 26, -1, -1, sizeof(::smartivrphonegateway::Config)},
        { 35, -1, -1, sizeof(::smartivrphonegateway::Status)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::smartivrphonegateway::_SmartIVRRequest_default_instance_._instance,
    &::smartivrphonegateway::_SmartIVRResponse_default_instance_._instance,
    &::smartivrphonegateway::_Config_default_instance_._instance,
    &::smartivrphonegateway::_Status_default_instance_._instance,
};
const char descriptor_table_protodef_smartivrphonegateway_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\032smartivrphonegateway.proto\022\024smartivrph"
    "onegateway\"}\n\017SmartIVRRequest\022\022\n\nis_play"
    "ing\030\001 \001(\010\022\021\n\tkey_press\030\002 \001(\t\022,\n\006config\030\003"
    " \001(\0132\034.smartivrphonegateway.Config\022\025\n\rau"
    "dio_content\030\004 \001(\014\"\317\001\n\020SmartIVRResponse\0228"
    "\n\004type\030\001 \001(\0162*.smartivrphonegateway.Smar"
    "tIVRResponseType\022\020\n\010text_asr\030\002 \001(\t\022\020\n\010te"
    "xt_bot\030\003 \001(\t\022\030\n\020forward_sip_json\030\004 \001(\t\022,"
    "\n\006status\030\005 \001(\0132\034.smartivrphonegateway.St"
    "atus\022\025\n\raudio_content\030\006 \001(\014\"!\n\006Config\022\027\n"
    "\017conversation_id\030\001 \001(\t\"\'\n\006Status\022\014\n\004code"
    "\030\001 \001(\005\022\017\n\007message\030\002 \001(\t*t\n\024SmartIVRRespo"
    "nseType\022\r\n\tRECOGNIZE\020\000\022\016\n\nRESULT_ASR\020\001\022\016"
    "\n\nRESULT_TTS\020\002\022\r\n\tCALL_WAIT\020\003\022\020\n\014CALL_FO"
    "RWARD\020\004\022\014\n\010CALL_END\020\0052v\n\024SmartIVRPhonega"
    "teway\022^\n\tCallToBot\022%.smartivrphonegatewa"
    "y.SmartIVRRequest\032&.smartivrphonegateway"
    ".SmartIVRResponse(\0010\001B|\n0smartcall.ivr.m"
    "aster.proto.smartivr_phonegatewayB\024Smart"
    "IVRPhonegatewayP\001Z0smartcall.ivr.master/"
    "proto/smartivr_phonegatewayb\006proto3"
};
static ::absl::once_flag descriptor_table_smartivrphonegateway_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_smartivrphonegateway_2eproto = {
    false,
    false,
    835,
    descriptor_table_protodef_smartivrphonegateway_2eproto,
    "smartivrphonegateway.proto",
    &descriptor_table_smartivrphonegateway_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_smartivrphonegateway_2eproto::offsets,
    file_level_metadata_smartivrphonegateway_2eproto,
    file_level_enum_descriptors_smartivrphonegateway_2eproto,
    file_level_service_descriptors_smartivrphonegateway_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_smartivrphonegateway_2eproto_getter() {
  return &descriptor_table_smartivrphonegateway_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_smartivrphonegateway_2eproto(&descriptor_table_smartivrphonegateway_2eproto);
namespace smartivrphonegateway {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmartIVRResponseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_smartivrphonegateway_2eproto);
  return file_level_enum_descriptors_smartivrphonegateway_2eproto[0];
}
bool SmartIVRResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class SmartIVRRequest::_Internal {
 public:
  static const ::smartivrphonegateway::Config& config(const SmartIVRRequest* msg);
};

const ::smartivrphonegateway::Config&
SmartIVRRequest::_Internal::config(const SmartIVRRequest* msg) {
  return *msg->_impl_.config_;
}
SmartIVRRequest::SmartIVRRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:smartivrphonegateway.SmartIVRRequest)
}
SmartIVRRequest::SmartIVRRequest(const SmartIVRRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmartIVRRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_press_) {}

    , decltype(_impl_.audio_content_) {}

    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.is_playing_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_press_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_press_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_press().empty()) {
    _this->_impl_.key_press_.Set(from._internal_key_press(), _this->GetArenaForAllocation());
  }
  _impl_.audio_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_content().empty()) {
    _this->_impl_.audio_content_.Set(from._internal_audio_content(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::smartivrphonegateway::Config(*from._impl_.config_);
  }
  _this->_impl_.is_playing_ = from._impl_.is_playing_;
  // @@protoc_insertion_point(copy_constructor:smartivrphonegateway.SmartIVRRequest)
}

inline void SmartIVRRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_press_) {}

    , decltype(_impl_.audio_content_) {}

    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.is_playing_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_press_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_press_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmartIVRRequest::~SmartIVRRequest() {
  // @@protoc_insertion_point(destructor:smartivrphonegateway.SmartIVRRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmartIVRRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_press_.Destroy();
  _impl_.audio_content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.config_;
}

void SmartIVRRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmartIVRRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:smartivrphonegateway.SmartIVRRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_press_.ClearToEmpty();
  _impl_.audio_content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _impl_.is_playing_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartIVRRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_playing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.is_playing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string key_press = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_press();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "smartivrphonegateway.SmartIVRRequest.key_press"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .smartivrphonegateway.Config config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes audio_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_audio_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmartIVRRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartivrphonegateway.SmartIVRRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_playing = 1;
  if (this->_internal_is_playing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_playing(), target);
  }

  // string key_press = 2;
  if (!this->_internal_key_press().empty()) {
    const std::string& _s = this->_internal_key_press();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "smartivrphonegateway.SmartIVRRequest.key_press");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .smartivrphonegateway.Config config = 3;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // bytes audio_content = 4;
  if (!this->_internal_audio_content().empty()) {
    const std::string& _s = this->_internal_audio_content();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartivrphonegateway.SmartIVRRequest)
  return target;
}

::size_t SmartIVRRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartivrphonegateway.SmartIVRRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_press = 2;
  if (!this->_internal_key_press().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key_press());
  }

  // bytes audio_content = 4;
  if (!this->_internal_audio_content().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_audio_content());
  }

  // .smartivrphonegateway.Config config = 3;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  // bool is_playing = 1;
  if (this->_internal_is_playing() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartIVRRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmartIVRRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartIVRRequest::GetClassData() const { return &_class_data_; }


void SmartIVRRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmartIVRRequest*>(&to_msg);
  auto& from = static_cast<const SmartIVRRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:smartivrphonegateway.SmartIVRRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_press().empty()) {
    _this->_internal_set_key_press(from._internal_key_press());
  }
  if (!from._internal_audio_content().empty()) {
    _this->_internal_set_audio_content(from._internal_audio_content());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::smartivrphonegateway::Config::MergeFrom(
        from._internal_config());
  }
  if (from._internal_is_playing() != 0) {
    _this->_internal_set_is_playing(from._internal_is_playing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmartIVRRequest::CopyFrom(const SmartIVRRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartivrphonegateway.SmartIVRRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartIVRRequest::IsInitialized() const {
  return true;
}

void SmartIVRRequest::InternalSwap(SmartIVRRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_press_, lhs_arena,
                                       &other->_impl_.key_press_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audio_content_, lhs_arena,
                                       &other->_impl_.audio_content_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmartIVRRequest, _impl_.is_playing_)
      + sizeof(SmartIVRRequest::_impl_.is_playing_)
      - PROTOBUF_FIELD_OFFSET(SmartIVRRequest, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartIVRRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_smartivrphonegateway_2eproto_getter, &descriptor_table_smartivrphonegateway_2eproto_once,
      file_level_metadata_smartivrphonegateway_2eproto[0]);
}
// ===================================================================

class SmartIVRResponse::_Internal {
 public:
  static const ::smartivrphonegateway::Status& status(const SmartIVRResponse* msg);
};

const ::smartivrphonegateway::Status&
SmartIVRResponse::_Internal::status(const SmartIVRResponse* msg) {
  return *msg->_impl_.status_;
}
SmartIVRResponse::SmartIVRResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:smartivrphonegateway.SmartIVRResponse)
}
SmartIVRResponse::SmartIVRResponse(const SmartIVRResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SmartIVRResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_asr_) {}

    , decltype(_impl_.text_bot_) {}

    , decltype(_impl_.forward_sip_json_) {}

    , decltype(_impl_.audio_content_) {}

    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_asr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_asr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text_asr().empty()) {
    _this->_impl_.text_asr_.Set(from._internal_text_asr(), _this->GetArenaForAllocation());
  }
  _impl_.text_bot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_bot_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text_bot().empty()) {
    _this->_impl_.text_bot_.Set(from._internal_text_bot(), _this->GetArenaForAllocation());
  }
  _impl_.forward_sip_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.forward_sip_json_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_forward_sip_json().empty()) {
    _this->_impl_.forward_sip_json_.Set(from._internal_forward_sip_json(), _this->GetArenaForAllocation());
  }
  _impl_.audio_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_content().empty()) {
    _this->_impl_.audio_content_.Set(from._internal_audio_content(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::smartivrphonegateway::Status(*from._impl_.status_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:smartivrphonegateway.SmartIVRResponse)
}

inline void SmartIVRResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.text_asr_) {}

    , decltype(_impl_.text_bot_) {}

    , decltype(_impl_.forward_sip_json_) {}

    , decltype(_impl_.audio_content_) {}

    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_asr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_asr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_bot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_bot_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.forward_sip_json_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.forward_sip_json_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audio_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.audio_content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmartIVRResponse::~SmartIVRResponse() {
  // @@protoc_insertion_point(destructor:smartivrphonegateway.SmartIVRResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmartIVRResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_asr_.Destroy();
  _impl_.text_bot_.Destroy();
  _impl_.forward_sip_json_.Destroy();
  _impl_.audio_content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void SmartIVRResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmartIVRResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:smartivrphonegateway.SmartIVRResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_asr_.ClearToEmpty();
  _impl_.text_bot_.ClearToEmpty();
  _impl_.forward_sip_json_.ClearToEmpty();
  _impl_.audio_content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartIVRResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .smartivrphonegateway.SmartIVRResponseType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::smartivrphonegateway::SmartIVRResponseType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string text_asr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text_asr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "smartivrphonegateway.SmartIVRResponse.text_asr"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string text_bot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text_bot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "smartivrphonegateway.SmartIVRResponse.text_bot"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string forward_sip_json = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_forward_sip_json();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "smartivrphonegateway.SmartIVRResponse.forward_sip_json"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .smartivrphonegateway.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes audio_content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_audio_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SmartIVRResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartivrphonegateway.SmartIVRResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .smartivrphonegateway.SmartIVRResponseType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // string text_asr = 2;
  if (!this->_internal_text_asr().empty()) {
    const std::string& _s = this->_internal_text_asr();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "smartivrphonegateway.SmartIVRResponse.text_asr");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string text_bot = 3;
  if (!this->_internal_text_bot().empty()) {
    const std::string& _s = this->_internal_text_bot();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "smartivrphonegateway.SmartIVRResponse.text_bot");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string forward_sip_json = 4;
  if (!this->_internal_forward_sip_json().empty()) {
    const std::string& _s = this->_internal_forward_sip_json();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "smartivrphonegateway.SmartIVRResponse.forward_sip_json");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .smartivrphonegateway.Status status = 5;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // bytes audio_content = 6;
  if (!this->_internal_audio_content().empty()) {
    const std::string& _s = this->_internal_audio_content();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartivrphonegateway.SmartIVRResponse)
  return target;
}

::size_t SmartIVRResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartivrphonegateway.SmartIVRResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text_asr = 2;
  if (!this->_internal_text_asr().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_text_asr());
  }

  // string text_bot = 3;
  if (!this->_internal_text_bot().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_text_bot());
  }

  // string forward_sip_json = 4;
  if (!this->_internal_forward_sip_json().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_forward_sip_json());
  }

  // bytes audio_content = 6;
  if (!this->_internal_audio_content().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_audio_content());
  }

  // .smartivrphonegateway.Status status = 5;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .smartivrphonegateway.SmartIVRResponseType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartIVRResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SmartIVRResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartIVRResponse::GetClassData() const { return &_class_data_; }


void SmartIVRResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SmartIVRResponse*>(&to_msg);
  auto& from = static_cast<const SmartIVRResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:smartivrphonegateway.SmartIVRResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text_asr().empty()) {
    _this->_internal_set_text_asr(from._internal_text_asr());
  }
  if (!from._internal_text_bot().empty()) {
    _this->_internal_set_text_bot(from._internal_text_bot());
  }
  if (!from._internal_forward_sip_json().empty()) {
    _this->_internal_set_forward_sip_json(from._internal_forward_sip_json());
  }
  if (!from._internal_audio_content().empty()) {
    _this->_internal_set_audio_content(from._internal_audio_content());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::smartivrphonegateway::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmartIVRResponse::CopyFrom(const SmartIVRResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartivrphonegateway.SmartIVRResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartIVRResponse::IsInitialized() const {
  return true;
}

void SmartIVRResponse::InternalSwap(SmartIVRResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_asr_, lhs_arena,
                                       &other->_impl_.text_asr_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_bot_, lhs_arena,
                                       &other->_impl_.text_bot_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forward_sip_json_, lhs_arena,
                                       &other->_impl_.forward_sip_json_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audio_content_, lhs_arena,
                                       &other->_impl_.audio_content_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SmartIVRResponse, _impl_.type_)
      + sizeof(SmartIVRResponse::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SmartIVRResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartIVRResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_smartivrphonegateway_2eproto_getter, &descriptor_table_smartivrphonegateway_2eproto_once,
      file_level_metadata_smartivrphonegateway_2eproto[1]);
}
// ===================================================================

class Config::_Internal {
 public:
};

Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:smartivrphonegateway.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Config* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_conversation_id().empty()) {
    _this->_impl_.conversation_id_.Set(from._internal_conversation_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:smartivrphonegateway.Config)
}

inline void Config::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.conversation_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.conversation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.conversation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:smartivrphonegateway.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.conversation_id_.Destroy();
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:smartivrphonegateway.Config)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.conversation_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string conversation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_conversation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "smartivrphonegateway.Config.conversation_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Config::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartivrphonegateway.Config)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    const std::string& _s = this->_internal_conversation_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "smartivrphonegateway.Config.conversation_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartivrphonegateway.Config)
  return target;
}

::size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartivrphonegateway.Config)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string conversation_id = 1;
  if (!this->_internal_conversation_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_conversation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }


void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:smartivrphonegateway.Config)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_conversation_id().empty()) {
    _this->_internal_set_conversation_id(from._internal_conversation_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartivrphonegateway.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.conversation_id_, lhs_arena,
                                       &other->_impl_.conversation_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_smartivrphonegateway_2eproto_getter, &descriptor_table_smartivrphonegateway_2eproto_once,
      file_level_metadata_smartivrphonegateway_2eproto[2]);
}
// ===================================================================

class Status::_Internal {
 public:
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:smartivrphonegateway.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Status* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:smartivrphonegateway.Status)
}

inline void Status::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.code_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:smartivrphonegateway.Status)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Status::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Status::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:smartivrphonegateway.Status)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "smartivrphonegateway.Status.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Status::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:smartivrphonegateway.Status)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "smartivrphonegateway.Status.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:smartivrphonegateway.Status)
  return target;
}

::size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:smartivrphonegateway.Status)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Status::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Status::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Status::GetClassData() const { return &_class_data_; }


void Status::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Status*>(&to_msg);
  auto& from = static_cast<const Status&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:smartivrphonegateway.Status)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:smartivrphonegateway.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);

  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_smartivrphonegateway_2eproto_getter, &descriptor_table_smartivrphonegateway_2eproto_once,
      file_level_metadata_smartivrphonegateway_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace smartivrphonegateway
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::smartivrphonegateway::SmartIVRRequest*
Arena::CreateMaybeMessage< ::smartivrphonegateway::SmartIVRRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::smartivrphonegateway::SmartIVRRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::smartivrphonegateway::SmartIVRResponse*
Arena::CreateMaybeMessage< ::smartivrphonegateway::SmartIVRResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::smartivrphonegateway::SmartIVRResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::smartivrphonegateway::Config*
Arena::CreateMaybeMessage< ::smartivrphonegateway::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::smartivrphonegateway::Config >(arena);
}
template<> PROTOBUF_NOINLINE ::smartivrphonegateway::Status*
Arena::CreateMaybeMessage< ::smartivrphonegateway::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::smartivrphonegateway::Status >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
